#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('swapr_server:server');
var http = require('http');
var models = require('../models');
var bcrypt = require('bcrypt-nodejs');
var jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

models.sequelize.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  models.Institute.build({ "name": "Georgia Tech" }).save()
  models.Course.build({ "name": "Chemistry I", "InstituteId": 1 }).save();
  models.Course.build({ "name": "Physics I", "InstituteId": 1}).save();
  models.Session.build({ "name": "Chemistry- Fall 2017", "startDate": "2017-08-21T16:00:00.000Z",
      "endDate": "2017-12-11T16:00:00.000Z", "CourseId": 1 }).save();
  models.Session.build({ "name": "Chemistry- Spring 2018", "startDate": "2018-01-11T16:00:00.000Z",
      "endDate": "2018-05-05T16:00:00.000Z", "CourseId": 1 }).save();
  var user1 = { "username": "adas62", "first_name": "Ayan", "last_name": "Das",
      "email": "adas62@gatech.edu" };
  var user2 = { "username": "djones", "first_name": "Daniel", "last_name": "Jones",
      "email": "djones4@gatech.edu" };
  var user3 = { "username": "rharris24", "first_name": "Rebecca", "last_name": "Harris",
      "email": "rharris24@gatech.edu" };
  var user4 = { "username": "tjackson", "first_name": "Tony", "last_name": "Jackson",
      "email": "tjackson@gatech.edu" };
  bcrypt.genSalt(5, function(err, salt) {
      if (err) {
        console.log(err);
      } else {
        bcrypt.hash("csrocks", salt, null, function(err, hash) {
            if (err) {
              console.log(err)
            } else {
              user1['password']= hash;
              user1['token'] = jwt.sign(user1, 'app_secret');
              models.User.build(user1).save();
              models.SessionEnrollment.build({ "SessionId": 1, "UserId": 1}).save();
            }
        });
      }
  });
  bcrypt.genSalt(5, function(err, salt) {
      if (err) {
         console.log(err);
      } else {
        bcrypt.hash("ramblinwreck", salt, null, function(err, hash) {
          if (err) {
            console.log(err)
          } else {
            user2['password']= hash;
            user2['token'] = jwt.sign(user2, 'app_secret');
            models.User.build(user2).save();
            models.SessionEnrollment.build({ "SessionId": 1, "UserId": 2}).save()
          }
        });
      }
  });
  bcrypt.genSalt(5, function(err, salt) {
    if (err) {
       console.log(err);
    } else {
      bcrypt.hash("fbiwreck", salt, null, function(err, hash) {
        if (err) {
          console.log(err)
        } else {
          user3['password']= hash;
          user3['token'] = jwt.sign(user3, 'app_secret');
          models.User.build(user3).save();
          models.SessionEnrollment.build({ "SessionId": 2, "UserId": 3}).save();
        }
      });
    }
  });
  bcrypt.genSalt(5, function(err, salt) {
    if (err) {
       console.log(err);
    } else {
      bcrypt.hash("gtbuzz", salt, null, function(err, hash) {
        if (err) {
          console.log(err)
        } else {
          user4['password']= hash;
          user4['token'] = jwt.sign(user4, 'app_secret');
          models.User.build(user4).save();
          models.SessionEnrollment.build({ "SessionId": 2, "UserId": 4}).save();
        }
      });
    }
  });

  /*models.SessionEnrollment.build({ "SessionId": 1, "UserId": 2}).save();
  models.SessionEnrollment.build({ "SessionId": 2, "UserId": 3}).save();
  models.SessionEnrollment.build({ "SessionId": 2, "UserId": 4}).save();*/
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
